BIG_BLIND = {{ game_big_blind }}
SMALL_BLIND = {{ game_small_blind }}
STARTING_STACK = {{ game_starting_stack }}
NUM_ROUNDS = {{ game_num_hands }}
CONNECT_TIMEOUT = 20
QUIT_TIMEOUT = 10
STARTING_GAME_CLOCK = {{ game_time_restriction }}
ENFORCE_GAME_CLOCK = True
GAME_LOG_FILENAME = 'gamelog'
BUILD_TIMEOUT = 10.

# DISPLAY_ILLEGAL_ACTIONS = True
# DUPLICATE = False

# TYPE can be FOLDER, SOCKET, RANDOM, or CHECKFOLD
# NAME is the name of bot and determines which persistent datastore the bot
#      accesses. For example, if you want to test a bot that learns over time
#      keep the same name so it can access the data it stored in previous
#      matches.
# RESET_KEYS determines whether the key/value store is cleared when starting
#      up. It's False by default.

# FOLDER: Automatically compiles and runs a bot from source.
# Requires PATH, which is either an absolute or relative (to the jar) path
# pointing to the source code.
#   PLAYER_1_TYPE = FOLDER 
#   PLAYER_1_PATH = .
#   PLAYER_1_SCONS_ARGS = 
#   PLAYER_1_NAME = FOLDERBOT
#   PLAYER_1_RESET_KEYS = False

# SOCKET: Engine will wait for bot to connect to a designed socket.
#   PLAYER_2_TYPE = SOCKET
#   PLAYER_2_NAME = SOCKETBOT

# RANDOM: Engine will use its own bot that plays randomly.
#   PLAYER_1_TYPE = RANDOM
#   PLAYER_1_NAME = RANDOMBOT

# CHECKFOLD: Engine will use its own bot that checks/folds as appropriate.
#   PLAYER_2_TYPE = CHECKFOLD
#   PLAYER_2_NAME = CHECKFOLDBOT

# PLAYER_1_TYPE = FOLDER
PLAYER_1_PATH = '{{ bot_a.path }}'
# PLAYER_1_SCONS_ARGS =
PLAYER_1_NAME = '{{ bot_a.name }}'
# PLAYER_1_RESET_KEYS = True
PLAYER_1_PORT = 6176

# PLAYER_2_TYPE = FOLDER
PLAYER_2_PATH = '{{ bot_b.path }}'
# PLAYER_2_SCONS_ARGS =
PLAYER_2_NAME = '{{ bot_b.name }}'
# PLAYER_2_RESET_KEYS = True
PLAYER_2_PORT = 6177